#We build rockets!

class Part:
    """Superclass for any piece of a rocket.

    Methods
    -------
    __init__

    Instance Variables
    ------------------
    name : str
       Identifying name of the part.

    m : float
       Mass of the part.

    cost : int
       Cost of the part.

    Cd : float
       Drag coefficient of the part.
    """

    def __init__(self, name, m, cost, Cd):
        """Prepare all Part instance variables.

        Returns
        -------
        None

        Parameters
        ----------
        name : str
           Identifying name of the Part.

        m : float
           Mass of the Part.

        cost : int
           Cost of the Part.

        Cd : float
           Drag coefficient of the Part.

        Notes
        -----
        """
        self.name = name
        self.mass = m
        self.cost = cost
        self.Cd = Cd

class Payload(Part):
    """Subclass of Part object distinguished by the addition of power required.

    Methods
    -------
    __init__

    Instance Variables
    ------------------
    pwrRqd : float
       Specifies power required to run the Payload. Can also specify power
      generated by the payload if the number is negative.
    """

    def __init__(self, name, m, cost, Cd, pwrRqd):
        """Prepare all Payload instance variables.

        Returns
        -------
        None

        Parameters
        ----------
        name : str
           Identifying name of the Payload.

        m : float
           Mass of the Payload.

        cost : int
           Cost of the Payload.

        Cd : float
           Drag coefficient of the Payload.

        pwrRqd : float
           Power required to run the Payload. Use a negative number to specify
           power generated by Payload.

        Notes
        -----
        Essentially this will be any object in the rocket that simply uses (or
        generates power). So this could be things like crew cabins, batteries,
        solar panels, etc.
        """
        Part.__init__(self, name, mTot, cost, Cd)
        self.pwrRqd = pwrRqd

class Engine(Part):
    """Subclass of Part object distinguished by addition of propulsion values.

    Methods
    -------
    __init__

    Instance Variables
    ------------------
    Itot : float
       Total impulse available to impart.

    Isp : float
       Specific impulse available to impart for this Engine.

    FvsT : I don't know
       **this needs to be figured out**
    """

    def __init__(self, name, m, cost, Cd, Itot, Isp, FvsT):
        """Prepare all Engine instance variables.

        Returns
        -------
        None

        Parameters
        ----------
        name : str
           Identifying name of the Engine.

        m : float
           Mass of the Engine.

        cost : int
           Cost of the Engine.

        Cd : float
           Drag coefficient of the Engine.

        Itot : float
           Total impulse available to impart.

        Isp : float
           Specific impulse available to impart for this Engine.

        FvsT : I don't know
           **this needs to be figured out**

        Notes
        -----
        """
        Part.__init__(self, name, mTot, cost, Cd)
        self.Itot = Itot
        self.Isp  = Isp
        self.FvsT = FvsT

class Fueltank(Part):
    """Subclass of Part object distinguished by the addition of dry mass value.

    Methods
    -------
    __init__

    Instance Variables
    ------------------
    drymass : float
       Mass of tank when it is empty. This way Fueltank.m minus drymass is the
       mass of the fuel.
    """

    def __init__(self, name, mTot, cost, Cd, drymass):
        """Prepare all Fueltank instance variables.

        Returns
        -------
        None

        Parameters
        ----------
        name : str
           Identifying name of the Fueltank.

        mTot : float
           Mass of the Fueltank when full.

        cost : int
           Cost of the Fueltank.

        Cd : float
           Drag coefficient of the Fueltank.

        drymass : float
           Mass of the Fueltank when empty.

        Notes
        -----
        """
        Part.__init__(self, name, mTot, cost, Cd)
        self.drymass = drymass

class Decoupler(Part):
    """Subclass of Part object not yet distinguished in any way.

    Methods
    -------
    __init__

    Instance Variables
    ------------------
    """
    def __init__(self, name, m, cost, Cd):
        """Prepare all Decoupler instance variables.

        Returns
        -------
        None

        Parameters
        ----------
        name : str
           Identifying name of the Decoupler.

        m : float
           Mass of the Decoupler.

        cost : int
           Cost of the Decoupler.

        Cd : float
           Drag coefficient of the Decoupler.

        Notes
        -----
        """
        Part.__init__(self, name, m, cost, Cd)
      
class Stage(Part):
    """Subclass of Part object to act as a container of other Parts.

    Methods
    -------
    __init__

    Instance Variables
    ------------------
    """
    def  __init__(self, parts):
        """Prepare all Stage instance variables.

        Returns
        -------
        None

        Parameters
        ----------
        parts : list
           List of Part subclasses specifying the components of the Stage.

        Notes
        -----
        """
        self.m = 0
        for obj in parts:
            self.m += obj.m

class Rocket:
    """Contains stages and has methods for construction and flying.

    Methods
    -------
    __init__
    assembleStages
    launch
    go

    Instance Variables
    ------------------
    stages : list
       List of Stage objects specifying the components of the Rocket.

    m : float
       Mass of the Rocket.

    x : float
       Current x position of the Rocket.

    y : float
       Current y position of the Rocket.

    vx : float
       Current x component of the Rocket's velocity.

    vy : float
       Current y component of the Rocket's velocity.

    ax : float
       Current x component of the Rocket's acceleration.

    ay : float
       Current y component of the Rocket's acceleration.

    vx_avg : float
       Current average x component of the Rocket's velocity between two time
       steps.

    vy_avg : float
       Current average y component of the Rocket's velocity between two time
       steps.
    """

    def __init__(self, stages):
        """Prepare Rocket instance variables.

        Returns
        -------
        None

        Parameters
        ----------
        stages : list
           List of Stage objects specifying the components of the Rocket.

        Notes
        -----
        Store the constituent stages in the Rocket object and sum up all of the
        mass for each stage to determine the total Rocket mass.
        """
        print "Initialized a Rocket."
        self.stages = stages
        self.m = 0
        for eachStage in stages:
            self.m += eachStage.m

    def assembleStages(self):
        """**Place holder right now, needs work.***
        """
        print "Ready to assemble stages!"

    def launch(self, x0, y0, v0x, v0y, a0x, a0y):
        """Initialize the position and motion variables of the Rocket.

        Returns
        -------
        None

        Parameters
        ----------
        x0 : float
           Initial x position of the Rocket.

        y0 : float
           Initial y position of the Rocket.

        v0x : float
           Initial x component of the Rocket's velocity.

        v0y : float
           Initial y component of the Rocket's velocity.

        a0x : float
           Initial x component of the Rocket's acceleration.

        a0y : float
           Initial y component of the Rocket's acceleration.

        Notes
        -----
        """
        self.x = x0
        self.y = y0
        self.vx = v0x
        self.vy = v0y
        self.ax = a0x
        self.ay = a0y

    def go(self, x, y, dt):
        """Compute rocket position and velocity after a given timestep.

        Returns
        -------
        None

        Parameters
        ----------
        x : float
           Rocket x position.

        y : float
           Rocket y position.

        dt : float
           Time step to advance by in seconds.

        Notes
        -----
        It seems like x and y keywords are not used so they can be removed. It
        would seem an positional information would just be retrieved from the
        Rocket object itself so there shouldn't be any need to input positions.
        nbrunett could be misinterpreting something however...
        """
        halfdt = dt/2.0
        #Advance 1/2 tstep to find avg v and new acc.
        self.vx_avg = self.vx + self.ax*halfdt
        self.vy_avg = self.vy + self.ay*halfdt
        #Put acc calculation here.
        self.x  += self.vx_avg*dt
        self.y  += self.vy_avg*dt
        self.vx += self.ax*dt
        self.vy += self.ay*dt



